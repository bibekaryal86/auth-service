/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package auth.service;

import static auth.service.app.util.ConstantUtils.ENV_SERVER_PORT;
import static java.util.Collections.singletonMap;

import auth.service.app.util.ConstantUtils;
import io.github.bibekaryal86.shdsvc.helpers.CommonUtilities;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Slf4j
@SpringBootApplication
@EnableTransactionManagement
@EnableAspectJAutoProxy
public class App {

  public static void main(String[] args) {
    log.info("Begin application initialization...");
    validateInitArgs();
    SpringApplication app = new SpringApplication(App.class);
    app.setDefaultProperties(
        singletonMap("server.port", CommonUtilities.getSystemEnvProperty(ENV_SERVER_PORT, "8001")));
    app.run(args);
    log.info("End application initialization...");
  }

  private static void validateInitArgs() {
    final boolean isProduction =
        "production"
            .equals(CommonUtilities.getSystemEnvProperty(ConstantUtils.SPRING_PROFILES_ACTIVE));
    final List<String> envKeyNames = new ArrayList<>(ConstantUtils.ENV_KEY_NAMES);

    if (isProduction) {
      envKeyNames.addAll(ConstantUtils.ENV_KEY_NAMES_PROD);
    } else {
      envKeyNames.addAll(ConstantUtils.ENV_KEY_NAMES_SANDBOX);
    }

    final Map<String, String> properties = CommonUtilities.getSystemEnvProperties(envKeyNames);
    final List<String> requiredEnvProperties =
        envKeyNames.stream().filter(key -> !ENV_SERVER_PORT.equals(key)).toList();
    final List<String> errors =
        requiredEnvProperties.stream().filter(key -> properties.get(key) == null).toList();
    if (!errors.isEmpty()) {
      throw new IllegalStateException(
          "One or more environment configurations could not be accessed...");
    }
  }
}
