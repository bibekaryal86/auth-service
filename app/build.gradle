buildscript {
    dependencies {
        classpath 'org.postgresql:postgresql:42.7.5'
        classpath 'org.flywaydb:flyway-database-postgresql:11.8.0'
        classpath 'org.yaml:snakeyaml:2.4'
    }
}

plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.13.1'
    id 'org.springframework.boot' version '3.4.5'
    id 'com.diffplug.spotless' version '7.0.3'
    id 'org.flywaydb.flyway' version '11.8.1'
}

dependencies {
    def springVersion = "3.4.5"
    def junitVersion = "5.12.2"
    def jjwtVersion = "0.12.6"

    implementation "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springVersion"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'io.swagger.parser.v3:swagger-parser:2.1.26'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.mailjet:mailjet-client:5.2.6'
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
    runtimeOnly 'org.postgresql:postgresql:42.7.5'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.8.0'

    testImplementation("org.springframework.boot:spring-boot-starter-test:$springVersion") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.springframework.boot:spring-boot-starter-webflux:$springVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.flywaydb:flyway-core:11.8.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'
    testImplementation 'com.h2database:h2:2.3.232'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

bootJar {
    archiveFileName = 'auth-service.jar'
}

test {
    useJUnitPlatform()
//    jacoco {
//        enabled = true
//    }
//    finalizedBy jacocoTestReport
}

application {
    mainClass = 'auth.service.App'
}

configurations {
    implementation.exclude module: 'spring-boot-starter-logging'
    implementation.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
    }
}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            enabled = true
//            element = 'CLASS'
//                            limit {
//                                counter = 'LINE'
//                                value = 'COVEREDRATIO'
//                                minimum = 0.8
//                            }
//        }
//    }
//}

jacocoTestReport {
    dependsOn test
}

// everything below is for local development only
import org.yaml.snakeyaml.Yaml

def loadAppCredentialsEnvVariables() {
    def file = file('../gcp/app-credentials.yaml')
    if (file.exists()) {
        def data = new Yaml().load(file.text)
        def properties = new Properties()

        if (data?.env_variables) {
            data.env_variables.each { key, value ->
                properties.setProperty(key, value)
            }
        }
        return properties
    } else {
        println "Warning: app-credentials.yaml file not found!"
        return new Properties()
    }
}

def isGithubActions = System.getenv('CI') == 'true'
def yamlProperties = loadAppCredentialsEnvVariables()

flyway {
    locations = ['classpath:db/migration']
    schemas = ['public']

    // for local development, use SANDBOX DB
    def db_host = yamlProperties.getProperty('DB_HOST_SANDBOX')
    def db_name = yamlProperties.getProperty('DB_DBNAME')

    if (db_host && db_name) {
        url = "jdbc:postgresql://${db_host}:5432/${db_name}"
        user = yamlProperties.getProperty('DB_USERNAME')
        password = yamlProperties.getProperty('DB_PASSWORD')
    } else if (!isGithubActions) {
        throw new GradleException("Flyway DB Host and Name Configuration Error...")
    } else {
        println "Flyway DB Host and Name Configuration Warning..."
    }
}

bootRun {
    // do not run flyway migrate when running the app
    systemProperty 'spring.flyway.enabled', 'false'
    def activeProfile = yamlProperties['SPRING_PROFILES_ACTIVE'] ?: 'development'
    systemProperty 'spring.profiles.active', activeProfile
    doFirst {
        yamlProperties.each { key, value ->
            environment key, value
        }
    }
}
